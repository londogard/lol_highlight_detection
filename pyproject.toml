[project]
name = "lol_highlights_londogard"  # Required
version = "0.0.1"  # Required
description = "A project to train models to automatically extract LoL E-Sport Highlights, and do it in a simple user-interface using Solara."
readme = "README.md"

requires-python = ">=3.7"
license = {file = "LICENSE"}
# keywords = ["sample", "setuptools", "development"]  # Optional

authors = [
  {name = "Hampus Londögård", email = "hampus@londogard.com" }
]

maintainers = [
  {name = "Hampus Londögård", email = "hampus@londogard.com" }
]

# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",

  "Framework :: Jupyter", 
  # Pick your license as you wish
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
dependencies = [ # Optional
  "lightning",
  "polars",
  "mlflow",
  "pydantic<2.0.0",
  "solara",
  "torch",
  "torchvision",
  "dagshub",
  "twitch-dl",
]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#[project.optional-dependencies] # Optional
# dev = ["check-manifest"]
# test = ["coverage"]

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
"Homepage" = "https://blog.londogard.com"
"Bug Reports" = "https://github.com/lol_highlight_detection/issues"
"Funding" = "https://donate.pypi.org"
"Say Thanks!" = "https://github.com/sponsors/londogard"
"Source" = "https://github.com/londogard/lol_highlight_detection"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
# [project.scripts]  # Optional
# sample = "sample:main"

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["solara_app", "data_utils", "utilities", "models", "streamlit_app", ]  # package names should match these glob patterns (["*"] by default)
exclude = []  # exclude packages matching these glob patterns (empty by default)
#namespaces = false  # to disable scanning PEP 420 namespaces (true by default)
